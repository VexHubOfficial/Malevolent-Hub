-- Malevolent Hub LocalScript
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- GUI references
local gui = script.Parent
local mainFrame = gui:WaitForChild("MainFrame")

-- =========================
-- TAB SYSTEM
-- =========================
local tabButtons = {
    Movement = mainFrame.TabBar:WaitForChild("MovementTabButton"),
    Settings = mainFrame.TabBar:WaitForChild("SettingsTabButton"),
    Player = mainFrame.TabBar:WaitForChild("PlayerTabButton"),
    Misc = mainFrame.TabBar:WaitForChild("MiscTabButton")
}

local tabFrames = {
    Movement = mainFrame:WaitForChild("MovementTabFrame"),
    Settings = mainFrame:WaitForChild("SettingsTabFrame"),
    Player = mainFrame:WaitForChild("PlayerTabFrame"),
    Misc = mainFrame:WaitForChild("MiscTabFrame")
}

local function showTab(name)
    for k,v in pairs(tabFrames) do
        v.Visible = (k==name)
    end
end

for name, button in pairs(tabButtons) do
    button.MouseButton1Click:Connect(function()
        showTab(name)
    end)
end
showTab("Movement") -- default tab

-- =========================
-- MOVEMENT TAB
-- =========================
local movementTab = tabFrames.Movement
local WalkSpeedSlider = movementTab:WaitForChild("WalkSpeedSliderFrame")
local JumpPowerSlider = movementTab:WaitForChild("JumpPowerSliderFrame")
local InfiniteJumpButton = movementTab:WaitForChild("InfiniteJumpButton")
local NoclipButton = movementTab:WaitForChild("NoclipButton")

local infiniteJumpEnabled = false
local noclipEnabled = false

-- Infinite Jump
InfiniteJumpButton.MouseButton1Click:Connect(function()
    infiniteJumpEnabled = not infiniteJumpEnabled
    InfiniteJumpButton.Text = infiniteJumpEnabled and "Infinite Jump: ON" or "OFF"
end)
UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- Noclip
NoclipButton.MouseButton1Click:Connect(function()
    noclipEnabled = not noclipEnabled
    NoclipButton.Text = noclipEnabled and "Noclip: ON" or "OFF"
end)
RunService.Stepped:Connect(function()
    if noclipEnabled and LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end)

-- Slider helper
local function setupSlider(sliderFrame, propertyName, minVal, maxVal)
    local knob = sliderFrame:WaitForChild("Knob")
    local label = sliderFrame:WaitForChild("TextLabel")
    local dragging = false

    knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = true end
    end)
    knob.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local relativeX = math.clamp(input.Position.X - sliderFrame.AbsolutePosition.X, 0, sliderFrame.AbsoluteSize.X)
            local value = math.floor(minVal + (relativeX/sliderFrame.AbsoluteSize.X)*(maxVal-minVal))
            knob.Position = UDim2.new(0, relativeX - knob.Size.X.Offset/2, 0, knob.Position.Y.Offset)
            label.Text = tostring(value)
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid[propertyName] = value
            end
        end
    end)
end

setupSlider(WalkSpeedSlider, "WalkSpeed", 16, 200)
setupSlider(JumpPowerSlider, "JumpPower", 50, 300)

-- =========================
-- SETTINGS TAB
-- =========================
local settingsTab = tabFrames.Settings
local themeFrame = settingsTab:WaitForChild("ThemeColorFrame")
local themeKnob = themeFrame:WaitForChild("ThemeColorKnob")
local themeLabel = themeFrame:WaitForChild("ColorLabel")
local fontFrame = settingsTab:WaitForChild("FontSizeSliderFrame")
local fontKnob = fontFrame:WaitForChild("FontSizeKnob")
local fontLabel = fontFrame:WaitForChild("TextLabel")

-- Default theme
mainFrame.BackgroundColor3 = Color3.fromRGB(255,0,0)

-- Theme color drag
local draggingTheme = false
themeKnob.InputBegan:Connect(function(input) if input.UserInputType==Enum.UserInputType.MouseButton1 then draggingTheme=true end end)
themeKnob.InputEnded:Connect(function(input) if input.UserInputType==Enum.UserInputType.MouseButton1 then draggingTheme=false end end)
UserInputService.InputChanged:Connect(function(input)
    if draggingTheme and input.UserInputType==Enum.UserInputType.MouseMovement then
        local x = math.clamp(input.Position.X - themeFrame.AbsolutePosition.X, 0, themeFrame.AbsoluteSize.X)
        themeKnob.Position = UDim2.new(0,x - themeKnob.Size.X.Offset/2,0,themeKnob.Position.Y.Offset)
        local hue = x / themeFrame.AbsoluteSize.X
        local color = Color3.fromHSV(hue,1,1)
        mainFrame.BackgroundColor3 = color
        themeLabel.Text = string.format("#%02X%02X%02X", math.floor(color.R*255), math.floor(color.G*255), math.floor(color.B*255))
        for _, btn in pairs(mainFrame:GetDescendants()) do
            if btn:IsA("TextButton") then
                btn.BackgroundColor3 = color
            end
        end
    end
end)

-- Font size drag
local draggingFont = false
fontKnob.InputBegan:Connect(function(input) if input.UserInputType==Enum.UserInputType.MouseButton1 then draggingFont=true end end)
fontKnob.InputEnded:Connect(function(input) if input.UserInputType==Enum.UserInputType.MouseButton1 then draggingFont=false end end)
UserInputService.InputChanged:Connect(function(input)
    if draggingFont and input.UserInputType==Enum.UserInputType.MouseMovement then
        local x = math.clamp(input.Position.X - fontFrame.AbsolutePosition.X, 0, fontFrame.AbsoluteSize.X)
        local size = math.floor(12 + (x / fontFrame.AbsoluteSize.X) * (48-12))
        fontKnob.Position = UDim2.new(0,x - fontKnob.Size.X.Offset/2,0,fontKnob.Position.Y.Offset)
        fontLabel.Text = tostring(size)
        for _, obj in pairs(mainFrame:GetDescendants()) do
            if obj:IsA("TextLabel") or obj:IsA("TextButton") then
                obj.TextSize = size
            end
        end
    end
end)

-- =========================
-- PLAYER TAB
-- =========================
local playerTab = tabFrames.Player
local gallery = playerTab:WaitForChild("PlayerGallery")
local template = gallery:WaitForChild("PlayerTemplate")
local teleportButton = playerTab:WaitForChild("TeleportButton")
local kickButton = playerTab:FindFirstChild("KickButton") -- optional
local selectedPlayer = nil

local function createPlayerEntry(player)
    local entry = template:Clone()
    entry.Visible = true
    entry.Name = player.Name
    entry.DisplayName.Text = player.DisplayName
    entry.Username.Text = player.Name
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    entry.HealthLabel.Text = player.Character and player.Character:FindFirstChild("Humanoid") and tostring(player.Character.Humanoid.Health).." HP" or "N/A"
    entry.DistanceLabel.Text = hrp and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and tostring((hrp.Position-LocalPlayer.Character.HumanoidRootPart.Position).Magnitude).." studs" or "N/A"
    local thumb = Players:GetUserThumbnailAsync(player.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size48x48)
    entry.ProfilePic.Image = thumb
    entry.MouseButton1Click:Connect(function()
        selectedPlayer = player
        for _, child in pairs(gallery:GetChildren()) do
            if child:IsA("TextButton") then child.BackgroundColor3=Color3.fromRGB(255,255,255) end
        end
        entry.BackgroundColor3 = Color3.fromRGB(0,255,0)
    end)
    entry.Parent = gallery
end

local function refreshGallery()
    gallery:ClearAllChildren()
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then createPlayerEntry(p) end
    end
end
refreshGallery()
Players.PlayerAdded:Connect(refreshGallery)
Players.PlayerRemoving:Connect(refreshGallery)

-- Teleport
teleportButton.MouseButton1Click:Connect(function()
    if selectedPlayer then
        ReplicatedStorage.AdminRemotes.TeleportToPlayer:FireServer(selectedPlayer)
    end
end)
-- Kick (optional)
if kickButton then
    kickButton.MouseButton1Click:Connect(function()
        if selectedPlayer then
            ReplicatedStorage.AdminRemotes.KickPlayer:FireServer(selectedPlayer)
        end
    end)
end

-- =========================
-- MISC TAB
-- =========================
local miscTab = tabFrames.Misc
local fullbrightButton = miscTab:WaitForChild("FullbrightButton")
local fullbrightEnabled = false
local oldLighting = {
    Brightness = Lighting.Brightness,
    ClockTime = Lighting.ClockTime,
    FogEnd = Lighting.FogEnd,
    Ambient = Lighting.Ambient,
    OutdoorAmbient = Lighting.OutdoorAmbient
}
fullbrightButton.MouseButton1Click:Connect(function()
    fullbrightEnabled = not fullbrightEnabled
    if fullbrightEnabled then
        Lighting.Brightness=2
        Lighting.ClockTime=12
        Lighting.FogEnd=100000
        Lighting.Ambient=Color3.fromRGB(255,255,255)
        Lighting.OutdoorAmbient=Color3.fromRGB(255,255,255)
        fullbrightButton.Text="Fullbright: ON"
    else
        for k,v in pairs(oldLighting) do Lighting[k]=v end
        fullbrightButton.Text="Fullbright: OFF"
    end
end)
